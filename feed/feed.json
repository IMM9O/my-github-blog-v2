{
  "version": "https://jsonfeed.org/version/1",
  "title": "IMM9O Blog",
  "home_page_url": "https://imm9o.github.io/",
  "feed_url": "https://imm9o.github.io/feed/feed.json",
  "description": "Voracious reader, blogger, and ambitious frontend engineer who is passionate about building large-scale apps with a focus on accessibility and performance 👨‍💻",
  "author": {
    "name": "Islam Muhammad.",
    "url": ""
  },
  "items": [{
      "id": "https://imm9o.github.io/posts/what-you-gona-lose-if-you-chose-react-over-angular/",
      "url": "https://imm9o.github.io/posts/what-you-gona-lose-if-you-chose-react-over-angular/",
      "title": "What you gonna lose if you choose react over angular",
      "content_html": "<blockquote>\n<p>List of stand alone features that makes angular framework distinguish from other frameworks.</p>\n</blockquote>\n<p style=\"text-align: center;\">\n  <img src=\"https://images.unsplash.com/photo-1581574919402-5b7d733224d6?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80\" alt=\"Photo by engin akyurt on Unsplash\">\n  <p style=\"text-align: center;\">Photo by <a href=\"https://unsplash.com/@enginakyurt\">engin akyurt</a> on <a href=\"https://unsplash.com/\">\n  Unsplash\n  </a>\n</p>\n<br/>\n<p>In this article <strong>&quot;What you gonna lose if you choose react over angular&quot;</strong><br>\nI will spot some of the features that make angular unique and stand out from other frameworks and this article not meant to compare react with angular there are already tons of articles or blog posts doing this, but in my opinion, if you choose x over y you will lose something so I wrote this article to guide you throw the features you gonna lose if you choose react over angular and finnaly you are free to choose whatever you want but remember you gonna lose something 😉.</p>\n<p>Before we start I know many of these features can add to react using the community libraries, but this approach came with many issues like</p>\n<ul>\n<li>The library not updated to match last version of react.</li>\n<li>Library's author decides to remove it.</li>\n<li>Maybe react upgrade itself making the library obsolete.</li>\n</ul>\n<h2 id=\"di-(dependency-injection)\">DI (Dependency injection) <a class=\"direct-link\" href=\"#di-(dependency-injection)\">#</a></h2>\n<p>Without a doubt <strong>Dependency injection</strong> is one of stand alone feature distinguished angular from other frameworks or library so i make it on the top of the list.</p>\n<p>So what is <strong>Dependency injection</strong>?</p>\n<p>In software engineering, dependency injection is a technique in which an object receives other objects that it depends on. These other objects are called dependencies. In the typical &quot;using&quot; relationship the receiving object is called a client and the passed object is called a service.</p>\n<p>What <strong>Dependency injection</strong> offers?</p>\n<ul>\n<li>Singleton class (restricts the instantiation of a class to one &quot;single&quot; instance).</li>\n<li>Easy to unit-test (you will pass the needed objects to the constructor).</li>\n<li>Sharing state between components.</li>\n<li>Sharing functionality through the app.</li>\n</ul>\n<p>What react offers similar to <strong>Dependency injection</strong> in angular?</p>\n<p>For sharing state react has a <a href=\"https://reactjs.org/docs/context.html\">context</a>, which provides a way to pass data through the component tree without having to pass props down manually at every level. This doesn't solve the scope issue after all context are global state and limited only to sharing state.</p>\n<p>For sharing functionality you can use class but if you want it a singleton class or loaded it when you need it like angular<br>\nyou gonna build it with your self as react team doesn't provide such a solution for this problem.</p>\n<h2 id=\"separation-of-concerns\">Separation of concerns <a class=\"direct-link\" href=\"#separation-of-concerns\">#</a></h2>\n<p>Angular doesn't have restrictions to wrote your angular component in one file or multi files one for html one for css and one for javascript, on the other hand, react force you to write your html with jsx syntax inside render function which is ok if the component very small and doesn't have a lot of logic attached to it <br>\nbut it will become a pain in ahead once that component scale up leaving you with readability issue.</p>\n<h2 id=\"scoped-css\">Scoped CSS <a class=\"direct-link\" href=\"#scoped-css\">#</a></h2>\n<p>Angular provides embedded solutions for scope css which is a very critical and essential feature if you want to build a reusable styled component, on the other hand, react team doesn't provide or recommend a solution and once again leaving you to decide whether you built your own solutions or stick with the variety options to pick up one of them.</p>\n<h2 id=\"stander-html-%F0%9F%98%A2\">Stander HTML 😢 <a class=\"direct-link\" href=\"#stander-html-%F0%9F%98%A2\">#</a></h2>\n<p>Surprise, JSX is not html and you can not use some attributes in html directly for example <code>class</code> become <code>className</code>, <code>for</code> become <code>htmlFor</code> I know it is not a big deal but it counts, and this leads us to another section.</p>\n<h2 id=\"web-components-not-fully-supported-in-react\">Web Components not fully supported in react <a class=\"direct-link\" href=\"#web-components-not-fully-supported-in-react\">#</a></h2>\n<p>I'm not going to explain what is <strong>Web Components</strong> or why it become a web stander you can check this <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">link</a> for more details.</p>\n<p>According to react <a href=\"https://reactjs.org/docs/web-components.html\">documentation</a>: &quot;React and Web Components are built to solve different problems. Web Components provide strong encapsulation for reusable components, while React provides a declarative library that keeps the DOM in sync with your data. The two goals are complementary. As a developer, you are free to use React in your Web Components, or to use Web Components in React, or both.&quot;</p>\n<p>This is sweet, but it is not completely honest for example according to the same documentation if you gonna use video tag for example and wat to listen to play or pause event from the dom you will need to use a ref to interact with the DOM node directly, it is like jquery old days.</p>\n<p>React team recommended to warp the web component with react component just to make it work another workaround for the limitation.</p>\n<h2 id=\"directives\">Directives <a class=\"direct-link\" href=\"#directives\">#</a></h2>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/bq6khdouhsm2j18e62vn.png\" alt=\"directives everywhere\"></p>\n<p>One of the funny facts about directives that it exists in almost any framework except react. Mostly the frameworks using two-approach either using their own template engine like <a href=\"https://laravel.com/docs/7.x/blade\">blade</a> in laravel or using regular html as template engine like RiotJs, VueJs and Angular.</p>\n<p>So, What is <strong>directives</strong>?</p>\n<p>The definition can be different from framework to another but in general it is supercharge the element attached to it with adding extra functionally that doesn't exist when the element created or attached to the dom.</p>\n<p>What angular <strong>directives</strong> provide?</p>\n<ul>\n<li>More readable instate of uglily inline ternary operator just write the directive on the element.</li>\n<li>Reusable piece of code.</li>\n<li>Directives can be attribute directive or structural directives.</li>\n<li>An Attribute directive changes the appearance or behavior of a DOM element.</li>\n<li>Structural directives are responsible for HTML layout.</li>\n</ul>\n<h2 id=\"forms%2C-forms-and-forms-%F0%9F%98%81\">Forms, Forms and Forms 😁 <a class=\"direct-link\" href=\"#forms%2C-forms-and-forms-%F0%9F%98%81\">#</a></h2>\n<p>There is no web app or websites nowadays doesn't have form or at least a search bar and I think <a href=\"https://angular.io/guide/reactive-forms\">reactive form</a> is one of the shining features exist only in angular solve many problems related to forms in an elegant and extendable way, this amazing feature makes build complex form super easy, easy to maintain and easy to customize. On the other hand, react team doesn't provide any solutions for just common forms problem and make it for developer decision and that leads to the lake of solutions out there and a lot of them are very opinionated and many of them solving part of the problem.</p>\n<p>Example: angular reactive form (Login Form)</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>      email<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><br>        Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">,</span><br>        Validators<span class=\"token punctuation\">.</span>email<br>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>      password<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><br>        Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">,</span><br>        noWhitespaceValidator <span class=\"token comment\">// custom validator</span><br>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token function\">onSubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">const</span> formValue <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// get the form data</span><br>            <span class=\"token comment\">// call the server or do what you want</span><br>            <span class=\"token comment\">// ...</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">[formGroup]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(ngSubmit)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onSubmit()<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autocomplete</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>off<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mat-form-field</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span><br>      <span class=\"token attr-name\">matInput</span><br>      <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Email<span class=\"token punctuation\">\"</span></span><br>      <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span><br>      <span class=\"token attr-name\">formControlName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span><br>      <span class=\"token attr-name\">autocomplete</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>off<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mat-form-field</span><span class=\"token punctuation\">></span></span><br><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mat-form-field</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span><br>      <span class=\"token attr-name\">matInput</span><br>      <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password<span class=\"token punctuation\">\"</span></span><br>      <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><br>      <span class=\"token attr-name\">formControlName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><br>      <span class=\"token attr-name\">autocomplete</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>off<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mat-form-field</span><span class=\"token punctuation\">></span></span><br><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">mat-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Login!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>As you can see it is very easy to maintain, read and more reasonable, i'm not going to explain reactive form in details but here is a list of what make it stand out features.</p>\n<ul>\n<li>Reactive forms provide a model-driven approach to handling form inputs whose values change over time.</li>\n<li>Reactive inputs are observables.</li>\n<li>Custom validators.</li>\n<li>Async Validators (for example: checking with server side if username available or not).</li>\n<li>Complex validator (for example: checking if renter password input matching password input).</li>\n</ul>\n<h2 id=\"angular-cli\">Angular CLI <a class=\"direct-link\" href=\"#angular-cli\">#</a></h2>\n<p>Angular CLI is not schofield generator or scripts running only it is beyond that and here are some of features.</p>\n<ul>\n<li>Generate components files directly from cli with pre filling data as you configured in cmd.</li>\n<li>Upgrade your angular project with one command.</li>\n<li>Create your own generates using <a href=\"https://angular.io/guide/schematics\">Angular schematics</a>.</li>\n<li>Support sass, less and stylus out of the box no need for extra setup or edit or eject web pack configurations.</li>\n</ul>\n<h1 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h1>\n<p>A lot of people are more interested in what they will lose, rather than what they will earn so that they will not regret the decision. It is like a trade-off you gonna win and lose there are no perfect solutions for all the problems either in life or in programming but after listing those features you can see the angular framework using regular html so most of solutions and features exist focus on reusability and not to break the web standers, on the other hand, react focus on keeping data in sync with ui.</p>\n</div>\n",
      "date_published": "2021-02-09T04:33:43.416-00:00"
    },{
      "id": "https://imm9o.github.io/posts/web_components_with_angular/",
      "url": "https://imm9o.github.io/posts/web_components_with_angular/",
      "title": "Web Components with angular",
      "content_html": "<p><img src=\"https://miro.medium.com/max/700/1*6-mRwWdL2vc3nY0kskFr3g.png\" alt=\"Create Stander Web Components using angular elements\"></p>\n<p>Create Stander Web Components using angular elements</p>\n<p>How to build web components using popular front-end framework angular.</p>\n<h2 id=\"before-we-start\">Before we start <a class=\"direct-link\" href=\"#before-we-start\">#</a></h2>\n<p>This article assume you have some experience build projects using angular and angular-cli it will not meant to be fully tutorials about angular or angular cli, so be careful.</p>\n<p>In this post i will show you how to extract any component built using angular framework to use it outside angular projects using a new package called angular elements.</p>\n<h2 id=\"what-is-web-component-%3F\">What is Web Component ? <a class=\"direct-link\" href=\"#what-is-web-component-%3F\">#</a></h2>\n<blockquote>\n<p>Web Components is a suite of different technologies allowing you to create reusable custom elements — with their functionality encapsulated away from the rest of your code — and utilize them in your web apps. (Source: MDN)</p>\n</blockquote>\n<h2 id=\"what-make-a-web-component-%3F\">What make a web component ? <a class=\"direct-link\" href=\"#what-make-a-web-component-%3F\">#</a></h2>\n<ul>\n<li><strong>Custom Elements</strong>The <a href=\"https://w3c.github.io/webcomponents/spec/custom/\">Custom Elements specification</a> lays the foundation for designing and using new types of DOM elements.</li>\n<li><strong>Shadow DOM</strong>The <a href=\"https://w3c.github.io/webcomponents/spec/shadow/\">shadow DOM specification</a> defines how to use encapsulated style and markup in web components.</li>\n<li><strong>ES Modules</strong>The <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#integration-with-the-javascript-module-system\">ES Modules specification</a> defines the inclusion and reuse of JS documents in a standards based, modular, performant way.</li>\n<li><strong>HTML Template</strong>The <a href=\"https://html.spec.whatwg.org/multipage/scripting.html#the-template-element/\">HTML template element specification</a> defines how to declare fragments of markup that go unused at page load, but can be instantiated later on at runtime.</li>\n</ul>\n<h2 id=\"why-web-component-%3F\">Why web component ? <a class=\"direct-link\" href=\"#why-web-component-%3F\">#</a></h2>\n<blockquote>\n<p>As developers, we all know that reusing code as much as possible is a good idea. This has traditionally not been so easy for custom markup structures — think of the complex HTML (and associated style and script) you’ve sometimes had to write to render custom UI controls, and how using them multiple times can turn your page into a mess if you are not careful. ( MDN )</p>\n</blockquote>\n<ul>\n<li><strong>Reusability</strong></li>\n<li><strong>Maintainability</strong></li>\n<li><strong>Productivity</strong></li>\n<li><strong>Composability</strong></li>\n<li><strong>Following web standard</strong></li>\n</ul>\n<h2 id=\"angular\">Angular <Angular-Element> <a class=\"direct-link\" href=\"#angular\">#</a></h2>\n<p><img src=\"https://miro.medium.com/max/500/1*1Dx9Yl54R7EZ0Cr4w6TxlA.png\" alt=\"Angular Element Logo\"></p>\n<p>Angular Element Logo</p>\n<h4 id=\"what-are-angular-elements%3F\">What are Angular Elements? <a class=\"direct-link\" href=\"#what-are-angular-elements%3F\">#</a></h4>\n<p>Imagine that you’ve developed an awesome Angular component. However, in real life, not all the web applications are Angular-based or even <a href=\"https://en.wikipedia.org/wiki/Single-page_application\">single-page</a> application. You wish to use your amazing component as part of any web application, website or any CMS like wordpress.</p>\n<p>Angular Team provide to us a new way to extract this component to use it outside our angular project and that we call it <strong>Angular Elements.</strong></p>\n<h4 id=\"prerequisites\">Prerequisites <a class=\"direct-link\" href=\"#prerequisites\">#</a></h4>\n<ul>\n<li>Angular CLI (version 6 or higher)</li>\n<li>NPM (version 5 or higher)</li>\n<li>Node (version 10.8.0 or higher)</li>\n</ul>\n<h4 id=\"1.-setup-your-angular-project.\">1. Setup Your Angular Project. <a class=\"direct-link\" href=\"#1.-setup-your-angular-project.\">#</a></h4>\n<p>Start up a new Angular project using the Angular CLI:</p>\n<p>Install some polyfills:</p>\n<pre><code>$ npm i @webcomponents/custom-elements --save\n</code></pre>\n<p>Import those packages into <code>polyfills.ts</code> file:</p>\n<h4 id=\"2.-create-new-component\">2. Create New Component <a class=\"direct-link\" href=\"#2.-create-new-component\">#</a></h4>\n<p>Create normal angular component with <code>Native</code> mode in encapsulation properties.</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li><em>Input will named in kebab-case for example (post-image instead of postImage)</em></li>\n<li><em>Component outputs are dispatched as HTML <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\">Custom Events</a>, with the name of the custom event matching the output name.</em></li>\n</ul>\n<h4 id=\"3.-update-ngmodule\">3. Update NgModule <a class=\"direct-link\" href=\"#3.-update-ngmodule\">#</a></h4>\n<p>Change <code>app.module</code> to use regular angular component as custom element</p>\n<p>as you can see from above we remove bootstrap array for module and add our generated component in entryComponents, and finally we define it inside <code>ngDoBootstrap</code> function (<strong>Note:</strong> we can change name of element not required to be exact as angular component name) and from this we can use it without root component just move to index.html and add some modification</p>\n<p>To show the results run this command</p>\n<h4 id=\"4.-package-your-angular-element\">4. Package Your Angular Element <a class=\"direct-link\" href=\"#4.-package-your-angular-element\">#</a></h4>\n<p>Now it is the time to package this thing up!, there is several ways</p>\n<p>**Build using angular cli:**This will generate the entire app inside dist folder</p>\n<p>**Build &amp; Bundle it in one file:**To use it anywhere else but this way require some additional pages to use (<code>concat &amp; fs-extra</code> ) packages.</p>\n<p>**Create <code>build-elements.js</code> file inside project root folder:**We will use this file to bundle our generated files inside dist folder into one file and save it inside <code>elements</code> folder.</p>\n<p>**Add new script into packages.json file:**To use it to build our element.</p>\n<h4 id=\"use-your-angular-element\">Use Your Angular Element <a class=\"direct-link\" href=\"#use-your-angular-element\">#</a></h4>\n<p>In the new <code>elements</code> folder create an <code>Index.html</code> file and add the following contents.</p>\n<h2 id=\"final-word\">Final Word <a class=\"direct-link\" href=\"#final-word\">#</a></h2>\n<p>It is a good practice to use standard web platform offers as we already know that not all the web are a single page app or built with angular, using a framework-agnostic way are good in many cases.</p>\n<blockquote>\n<p>Note: A minimal, self-contained version of the Angular framework will be injected as a service to support the component’s change-detection and data-binding functionality. ( <a href=\"http://angular.io\">angular.io</a> )</p>\n</blockquote>\n<h2 id=\"need-more\">Need More <a class=\"direct-link\" href=\"#need-more\">#</a></h2>\n<p>Here is a list of a good resources explain angular elements.</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=4u9_kdkvTsc\">Angular Elements Quick Start</a> - Fireship</li>\n<li><a href=\"https://www.youtube.com/watch?v=ujaMvl5M8nY\">Advanced Angular Elements</a> - Fireship</li>\n</ul>\n",
      "date_published": "2021-02-09T04:33:43.416-00:00"
    },{
      "id": "https://imm9o.github.io/posts/rules_of_change_detections_in_angular/",
      "url": "https://imm9o.github.io/posts/rules_of_change_detections_in_angular/",
      "title": "Rules of change detections in angular",
      "content_html": "<center>\n<p><img src=\"https://images.unsplash.com/reserve/81gZijLSWfge41LgzqQ6_Moving%20Parts.JPG?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1352&amp;q=80\" alt=\"alt\"><br>\n<span><small>Photo by <a href=\"https://unsplash.com/@chesteralvarez?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Chester Alvarez</a> on <a href=\"https://unsplash.com/s/photos/gear?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></small></span></p>\n</center>\n<blockquote>\n<p>What makes angular running change detection and how to optimize it</p>\n</blockquote>\n<h2 id=\"what-is-change-detection%3F\">What is change detection? <a class=\"direct-link\" href=\"#what-is-change-detection%3F\">#</a></h2>\n<p>Change detection is the mechanism designed to track changes in an application state and render the updated state on the screen. It ensures that the user interface always stays in sync with the internal state of the program.</p>\n<h2 id=\"how-change-detections-work-in-angular%3F\">How change detections work in angular? <a class=\"direct-link\" href=\"#how-change-detections-work-in-angular%3F\">#</a></h2>\n<p>Angular uses <a href=\"https://indepth.dev/posts/1059/do-you-still-think-that-ngzone-zone-js-is-required-for-change-detection-in-angular\">ZoneJS</a> to intercept events that occurred in the application and run a change detection cycle automatically.</p>\n<p>We can reduce events that angular intercept by changing <code>ChangeDetectionStrategy</code> in component decorator to <code>ChangeDetectionStrategy.OnPush</code></p>\n<p>ChangeDetectionStrategy.OnPush tells Angular that the component only depends on its @inputs() ( aka pure ) and needs to be checked only in the following cases:</p>\n<p>1️⃣ The Input reference changes.<br>\n2️⃣ An event originated from the component or one of its children. ( The rule applies only to DOM events)<br>\n3️⃣ We run change detection explicitly.<br>\n4️⃣ Observable emits a new value inside the component template.</p>\n<h2 id=\"how-to-optimize-running-of-change-detection\">How to optimize running of change detection <a class=\"direct-link\" href=\"#how-to-optimize-running-of-change-detection\">#</a></h2>\n<ul>\n<li>Always use <code>OnPush</code> Change Detection Strategy.</li>\n<li>Always use <a href=\"https://medium.com/javascript-in-plain-english/how-to-deep-copy-objects-and-arrays-in-javascript-7c911359b089\">immutable</a> data because once you set component to <code>OnPush</code> strategy angular will use <a href=\"https://javascript.info/object-copy\">shallow</a> comparison to detect change and perform the reRender task.</li>\n<li>Prevent unnecessary emits in observables inside component.</li>\n<li>Prevent triggers unnecessary async task like scrolling using technics like <a href=\"https://levelup.gitconnected.com/debounce-in-javascript-improve-your-applications-performance-5b01855e086\">Debounce</a> or <a href=\"https://levelup.gitconnected.com/throttle-in-javascript-improve-your-applications-performance-984a4e020a3f\">Throttle</a>.</li>\n<li>Reduce the amount of <a href=\"https://web.dev/optimize-fid/\">long tasks</a> by moving it to <a href=\"https://blog.bitsrc.io/angular-performance-web-workers-df382c4d3919\">Web Workers</a>.</li>\n<li>Use <a href=\"https://medium.com/@krzysztof.grzybek89/how-runoutsideangular-might-reduce-change-detection-calls-in-your-app-6b4dab6e374d\">runOutsideAngular</a> when starting a work consisting of one or more asynchronous tasks that don't require UI.</li>\n</ul>\n",
      "date_published": "2021-02-09T04:33:43.416-00:00"
    },{
      "id": "https://imm9o.github.io/posts/how_to_speed_up_your_workflow/",
      "url": "https://imm9o.github.io/posts/how_to_speed_up_your_workflow/",
      "title": "A little trick for your productivity",
      "content_html": "<center>\n<p><img src=\"https://images.unsplash.com/photo-1508175911810-a4817cd3d7b4?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1951&amp;q=80\" alt=\"alt\"></p>\n<p><span><small>Photo by <a href=\"https://unsplash.com/@baudy?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Tim Carey</a> on <a href=\"https://unsplash.com/s/photos/speed?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></small></span></p>\n</center>\n<h2 id=\"shortcuts-your-commands\">Shortcuts your commands <a class=\"direct-link\" href=\"#shortcuts-your-commands\">#</a></h2>\n<p>If you use bash (and you should use it?) you can customize and add commands that you are using a lot in your daily workflow instated of writing it over and over by simply type the alias for your command.</p>\n<p>To activate it very easy, just follow the instruction</p>\n<ol>\n<li>Open <code>.bashrc</code> file</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># if you are using vs code or open it with any editor you like</span><br>code ~/.bashrc</code></pre>\n<ol start=\"2\">\n<li>Add your alias at the end of file<br>\nAnd here are some examples you can use it</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">lgnpm</span><span class=\"token operator\">=</span><span class=\"token string\">\"npm list -g --depth=0\"</span> <span class=\"token comment\"># list all globally installed package</span><br><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">lgu</span><span class=\"token operator\">=</span><span class=\"token string\">\"git config --list --local | grep user.*\"</span> <span class=\"token comment\"># list user name and email associative with current repo</span><br><span class=\"token comment\"># git commands</span><br><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gf</span><span class=\"token operator\">=</span><span class=\"token string\">\"git fetch origin\"</span><br><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gc</span><span class=\"token operator\">=</span><span class=\"token string\">\"git clone\"</span><br><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gs</span><span class=\"token operator\">=</span><span class=\"token string\">\"git status\"</span><br><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gl</span><span class=\"token operator\">=</span><span class=\"token string\">\"git pull\"</span><br><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gp</span><span class=\"token operator\">=</span><span class=\"token string\">\"git push\"</span><br><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gc</span><span class=\"token operator\">=</span><span class=\"token string\">\"git commit -d\"</span><br><br><span class=\"token comment\"># and you know the rest</span></code></pre>\n<h2 id=\"filter-your-mails-(works-with-gmail-only)\">Filter your mails (works with Gmail only) <a class=\"direct-link\" href=\"#filter-your-mails-(works-with-gmail-only)\">#</a></h2>\n<p>When you register for a website for the first time you can change your email address by simply adding plus sign before <code>@</code> symbol.</p>\n<p>For example, whenever you sign up for a newsletter, you could use <a href=\"mailto:mygmail+newsletters@gmail.com\">mygmail+newsletters@gmail.com</a>. Gmail will not look at what comes after the plus sign in the address so that the emails will come straight your inbox. However, you will still see those messages addressed with the +newsletters part, making them easy to spot &amp; filter.</p>\n<p>Using the same newsletters example, you can filter emails you get with mygmail+newsletters. Have them move to a specific folder, be flagged, or marked as read.</p>\n<center>\n<figure class=\"image\">\n  <img src=\"../../img/gmail-trick-1.png\" alt=\"gmail filter step 1\">\n  <figcaption>Gmail filter step 1</figcaption>\n</figure>\n<figure class=\"image\">\n  <img src=\"../../img/gmail-trick-2.png\" alt=\"gmail filter step 2\">\n  <figcaption>Gmail filter step 2</figcaption>\n</figure>\n</center>\n",
      "date_published": "2021-02-09T04:33:43.416-00:00"
    },{
      "id": "https://imm9o.github.io/posts/add_one_or_more_ssh_keys_in_one_machine/",
      "url": "https://imm9o.github.io/posts/add_one_or_more_ssh_keys_in_one_machine/",
      "title": "Add Multiple ssh keys in one machine",
      "content_html": "<center>\n<p><img src=\"https://images.unsplash.com/photo-1464062198447-e6e5c40c43c5?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1394&amp;q=80\" alt=\"railway\"></p>\n<p><span><small><span>Photo by <a href=\"https://unsplash.com/@thesollers?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Anton Darius</a> on <a href=\"https://unsplash.com/s/photos/railway?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></small></span></p>\n</center>\n<p>In this post i will explain how to add one or more ssh keys in one machine, use one for personal use and the others for work. I will explain it for gihub but the steps can be applicable for any git providers.</p>\n<p>Before we start you have to install git first.</p>\n<h4 id=\"view-exist-ssh-keys\">View exist ssh keys <a class=\"direct-link\" href=\"#view-exist-ssh-keys\">#</a></h4>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> -al ~/.ssh</code></pre>\n<h4 id=\"generate-new-ssh-key\">Generate new ssh key <a class=\"direct-link\" href=\"#generate-new-ssh-key\">#</a></h4>\n<p>After running this command it will generate two file public/private keys</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> ~/.ssh<br>$ ssh-keygen -t rsa -f <span class=\"token string\">\"id_rsa_personal_github\"</span>    <span class=\"token comment\"># for personal account</span><br>$ ssh-keygen -t rsa -f <span class=\"token string\">\"id_rsa_work_github\"</span>         <span class=\"token comment\"># for work account</span></code></pre>\n<h4 id=\"adding-the-new-ssh-key-to-the-corresponding-(github%2C-bitbuckt-or-gitlab)-account\">Adding the new SSH key to the corresponding (GitHub, Bitbuckt or Gitlab) account <a class=\"direct-link\" href=\"#adding-the-new-ssh-key-to-the-corresponding-(github%2C-bitbuckt-or-gitlab)-account\">#</a></h4>\n<ul>\n<li>Copy generated key(s) to clipboard</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ clip <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa_personal_github.pub          <span class=\"token comment\"># for github account</span><br>$ clip <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa_work_github.pub               <span class=\"token comment\"># for gitlab account</span></code></pre>\n<ul>\n<li>Add clipboard to github accounts:</li>\n</ul>\n<ol>\n<li>Go to Settings</li>\n<li>Select SSH and GPG keys from the menu to the left.</li>\n<li>Click on New SSH key, provide a suitable title, and paste the key in the box below</li>\n<li>Click Add key — and you’re done!</li>\n</ol>\n<h4 id=\"registering-the-new-ssh-keys-with-the-ssh-agent\">Registering the new SSH Keys with the ssh-agent <a class=\"direct-link\" href=\"#registering-the-new-ssh-keys-with-the-ssh-agent\">#</a></h4>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># start the ssh-agent in the background</span><br>$ <span class=\"token builtin class-name\">eval</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>ssh-agent -s<span class=\"token variable\">)</span></span><br>Agent pid <span class=\"token number\">59566</span><br><br>$ ssh-add ~/.ssh/id_rsa_personal_github    <span class=\"token comment\"># for personal account</span><br>$ ssh-add ~/.ssh/id_rsa_work_github        <span class=\"token comment\"># for work account</span></code></pre>\n<h4 id=\"creating-the-ssh-config-file\">Creating the SSH config file <a class=\"direct-link\" href=\"#creating-the-ssh-config-file\">#</a></h4>\n<p>Using this file to tell git installed on your machine what key to use when pushing to upstream.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/.ssh/<br>$ <span class=\"token function\">touch</span> config           <span class=\"token comment\"># Create the file if not exists</span><br>$ code config            <span class=\"token comment\"># Open the file in VS code or use any editor</span></code></pre>\n<blockquote>\n<p>config file</p>\n</blockquote>\n<pre class=\"language-js\"><code class=\"language-js\"># Personal GitHub Account<br>Host github<span class=\"token punctuation\">.</span>com<br>   HostName github<span class=\"token punctuation\">.</span>com<br>   User git<br>   IdentityFile <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh<span class=\"token operator\">/</span>id_rsa_personal_github<br># Work GitLab Account<br>Host gitLab<span class=\"token punctuation\">.</span>com    <br>   HostName gitLab<span class=\"token punctuation\">.</span>com <br>   User git<br>   IdentityFile <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh<span class=\"token operator\">/</span>id_rsa_work_github</code></pre>\n<h3 id=\"resources\">Resources <a class=\"direct-link\" href=\"#resources\">#</a></h3>\n<ul>\n<li><a href=\"https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">Setup SSH Key - GitHub</a></li>\n<li><a href=\"https://support.atlassian.com/bitbucket-cloud/docs/set-up-an-ssh-key/\">Setup SSH Key - bitbucket</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ssh/\">Setup SSH Key - Gitlab</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hQWRp-FdTpc\">SSH Crash Course</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=SWYqp7iY_Tc\">Git &amp; GitHub Crash Course For Beginners</a></li>\n</ul>\n",
      "date_published": "2021-02-09T04:33:43.416-00:00"
    }
  ]
}
